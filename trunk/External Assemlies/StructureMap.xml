<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StructureMap</name>
    </assembly>
    <members>
        <member name="T:StructureMap.Interceptors.InstanceFactoryInterceptor">
            <summary>
            Base "Decorator" class around IInstanceFactory to alter the object creation process
            for a PluginType.  The SingletonInterceptor is an example subclass that ensures that 
            only one instance is created for a given InstanceKey as a more testable alternative to 
            the GoF Singleton pattern. 
            </summary>
        </member>
        <member name="T:StructureMap.IInstanceFactory">
            <summary>
            Interface for a "Factory" pattern class that creates object instances of the PluginType
            </summary>
        </member>
        <member name="M:StructureMap.IInstanceFactory.SetInstanceManager(StructureMap.InstanceManager)">
            <summary>
            Establishes a reference to the parent InstanceManager
            </summary>
            <param name="instanceManager"></param>
        </member>
        <member name="M:StructureMap.IInstanceFactory.GetInstance(System.String)">
            <summary>
            Creates an object instance for the InstanceKey
            </summary>
            <param name="InstanceKey">The named instance</param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.IInstanceFactory.GetInstance(StructureMap.InstanceMemento)">
            <summary>
            Creates an object instance directly from the Memento
            </summary>
            <param name="Memento">A representation of an object instance</param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.IInstanceFactory.GetInstance">
            <summary>
            Creates a new object instance of the default instance memento
            </summary>
            <returns></returns>
        </member>
        <member name="M:StructureMap.IInstanceFactory.GetArray(StructureMap.InstanceMemento[])">
            <summary>
            Returns an array of objects, one for each InstanceMemento passed in
            </summary>
            <param name="Mementos"></param>
            <returns>An array of InstanceMemento's to build out into objects</returns>
        </member>
        <member name="M:StructureMap.IInstanceFactory.SetDefault(System.String)">
            <summary>
            Sets the default instance 
            </summary>
            <param name="InstanceKey"></param>
        </member>
        <member name="M:StructureMap.IInstanceFactory.SetDefault(StructureMap.InstanceMemento)">
            <summary>
            Makes the InstanceMemento the basis of the default instance
            </summary>
            <param name="Memento"></param>
        </member>
        <member name="M:StructureMap.IInstanceFactory.GetAllInstances">
            <summary>
            Returns an IList of all of the configured instances
            </summary>
            <returns></returns>
        </member>
        <member name="P:StructureMap.IInstanceFactory.PluginType">
            <summary>
            The CLR System.Type that the IInstanceManager builds instances  
            </summary>
        </member>
        <member name="P:StructureMap.IInstanceFactory.DefaultInstanceKey">
            <summary>
            The InstanceKey of the default instance built by this IInstanceFactory
            </summary>
        </member>
        <member name="M:StructureMap.Interceptors.InstanceFactoryInterceptor.SetInstanceManager(StructureMap.InstanceManager)">
            <summary>
            Establishes a reference to the parent InstanceManager
            </summary>
            <param name="instanceManager"></param>
        </member>
        <member name="M:StructureMap.Interceptors.InstanceFactoryInterceptor.GetInstance(System.String)">
            <summary>
            Creates an object instance for the InstanceKey
            </summary>
            <param name="instanceKey">The named instance</param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Interceptors.InstanceFactoryInterceptor.GetInstance(StructureMap.InstanceMemento)">
            <summary>
            Creates an object instance directly from the Memento
            </summary>
            <param name="Memento">A representation of an object instance</param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Interceptors.InstanceFactoryInterceptor.GetInstance">
            <summary>
            Creates a new object instance of the default instance memento
            </summary>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Interceptors.InstanceFactoryInterceptor.GetArray(StructureMap.InstanceMemento[])">
            <summary>
            Returns an array of objects, one for each InstanceMemento passed in
            </summary>
            <param name="Mementos"></param>
            <returns>An array of InstanceMemento's to build out into objects</returns>
        </member>
        <member name="M:StructureMap.Interceptors.InstanceFactoryInterceptor.SetDefault(System.String)">
            <summary>
            Sets the default instance 
            </summary>
            <param name="instanceKey"></param>
        </member>
        <member name="M:StructureMap.Interceptors.InstanceFactoryInterceptor.SetDefault(StructureMap.InstanceMemento)">
            <summary>
            Makes the InstanceMemento the basis of the default instance
            </summary>
            <param name="Memento"></param>
        </member>
        <member name="P:StructureMap.Interceptors.InstanceFactoryInterceptor.IsMockedOrStubbed">
            <summary>
            Declares whether or not the interceptor creates a stubbed or mocked version of the PluginType 
            </summary>
        </member>
        <member name="P:StructureMap.Interceptors.InstanceFactoryInterceptor.PluginType">
            <summary>
            The CLR System.Type that the IInstanceManager builds instances  
            </summary>
        </member>
        <member name="P:StructureMap.Interceptors.InstanceFactoryInterceptor.DefaultInstanceKey">
            <summary>
            The InstanceKey of the default instance built by this IInstanceFactory
            </summary>
        </member>
        <member name="T:StructureMap.Graph.PluginCollection">
            <summary>
            Custom collection for Plugin objects
            </summary>
        </member>
        <member name="M:StructureMap.Graph.PluginCollection.Add(System.Type,System.String)">
            <summary>
            Adds a new Plugin by the PluggedType
            </summary>
            <param name="pluggedType"></param>
            <param name="concreteKey"></param>
        </member>
        <member name="M:StructureMap.Graph.PluginCollection.HasPlugin(System.String)">
            <summary>
            Does the PluginFamily contain a Plugin
            </summary>
            <param name="concreteKey"></param>
            <returns></returns>
        </member>
        <member name="P:StructureMap.Graph.PluginCollection.Item(System.Type)">
            <summary>
            Gets a Plugin by its PluggedType
            </summary>
            <param name="PluggedType"></param>
            <returns></returns>
        </member>
        <member name="P:StructureMap.Graph.PluginCollection.Item(System.String)">
            <summary>
            Retrieves a Plugin by its ConcreteKey
            </summary>
            <param name="concreteKey"></param>
            <returns></returns>
        </member>
        <member name="T:StructureMap.Graph.MachineOverride">
            <summary>
            Models the machine-level overrides for default instances per plugin type.
            </summary>
        </member>
        <member name="M:StructureMap.Graph.MachineOverride.AddMachineOverride(System.String,System.String)">
            <summary>
            Registers an override for the default instance of a certain plugin type.
            </summary>
            <param name="pluginTypeName"></param>
            <param name="defaultKey"></param>
        </member>
        <member name="M:StructureMap.Graph.MachineOverride.HasOverride(System.String)">
            <summary>
            Determines if the MachineOverride instance has an overriden default for the plugin type
            </summary>
            <param name="pluginTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Graph.MachineOverride.FilterOutNonExistentPluginTypes(StructureMap.Configuration.PluginGraphReport)">
            <summary>
            Filters instance defaults for plugin types that are no longer contained by
            the PluginGraph
            </summary>
            <param name="report"></param>
        </member>
        <member name="P:StructureMap.Graph.MachineOverride.DefaultKey(System.String)">
            <summary>
            Finds the default key for a plugin type
            </summary>
        </member>
        <member name="P:StructureMap.Graph.MachineOverride.ProfileName">
            <summary>
            If the MachineOverride has a Profile, returns the profile name
            </summary>
        </member>
        <member name="T:StructureMap.Graph.InterceptionChain">
            <summary>
            Manages a list of InstanceFactoryInterceptor's.  Design-time model of an array
            of decorators to alter the InstanceFactory behavior for a PluginType.
            </summary>
        </member>
        <member name="T:StructureMap.Emitting.Parameters.StringParameterEmitter">
            <summary>
            Implementation of ParameterEmitter for string type constructor arguments
            </summary>
        </member>
        <member name="T:StructureMap.Emitting.Parameters.ParameterEmitter">
            <summary>
            Abstract class to provide a template for emitting the instructions for retrieving
            one constructor function argument from an InstanceMemento and feeding into the 
            constructor function
            </summary>
        </member>
        <member name="T:StructureMap.InstanceMemento">
            <summary>
            GoF Memento representing an Object Instance
            </summary>
        </member>
        <member name="M:StructureMap.InstanceMemento.GetProperty(System.String)">
            <summary>
            Retrieves the named property value as a string
            </summary>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.InstanceMemento.getPropertyValue(System.String)">
            <summary>
            Template method for implementation specific retrieval of the named property
            </summary>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.InstanceMemento.GetChildMemento(System.String)">
            <summary>
            Returns the named child InstanceMemento
            </summary>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.InstanceMemento.getChild(System.String)">
            <summary>
            Template method for implementation specific retrieval of the named property
            </summary>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.InstanceMemento.GetChild(System.String,System.String,StructureMap.InstanceManager)">
            <summary>
            Using InstanceManager and the TypeName, creates an object instance using the
            child InstanceMemento specified by Key
            </summary>
            <param name="key"></param>
            <param name="typeName"></param>
            <param name="manager"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.InstanceMemento.GetStringArray(System.String)">
            <summary>
            Not used yet.
            </summary>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.InstanceMemento.GetChildrenArray(System.String)">
            <summary>
            This method is made public for testing.  It is not necessary for normal usage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:StructureMap.InstanceMemento.Substitute(StructureMap.InstanceMemento)">
            <summary>
            Used to create a templated InstanceMemento
            </summary>
            <param name="memento"></param>
            <returns></returns>
        </member>
        <member name="P:StructureMap.InstanceMemento.ConcreteKey">
            <summary>
            The named type of the object instance represented by the InstanceMemento.  Translates to a concrete
            type
            </summary>
        </member>
        <member name="P:StructureMap.InstanceMemento.InstanceKey">
            <summary>
            The named key of the object instance represented by the InstanceMemento
            </summary>
        </member>
        <member name="P:StructureMap.InstanceMemento.TemplateName">
            <summary>
            Gets the referred template name
            </summary>
            <returns></returns>
        </member>
        <member name="P:StructureMap.InstanceMemento.LastKey">
            <summary>
            Returns the last key/value retrieved for exception tracing 
            </summary>
        </member>
        <member name="P:StructureMap.InstanceMemento.IsReference">
            <summary>
            Template pattern property specifying whether the InstanceMemento is simply a reference
            to another named instance.  Useful for child objects.
            </summary>
        </member>
        <member name="P:StructureMap.InstanceMemento.ReferenceKey">
            <summary>
            Template pattern property specifying the instance key that the InstanceMemento refers to
            </summary>
        </member>
        <member name="P:StructureMap.InstanceMemento.IsDefault">
            <summary>
            Is the InstanceMemento a reference to the default instance of the plugin type?
            </summary>
        </member>
        <member name="T:StructureMap.Exceptions.InstancePropertyValueException">
            <summary>
            Thrown by IProperty classes when an invalid value is applied to 
            a property of an InstanceGraph
            </summary>
        </member>
        <member name="T:StructureMap.Emitting.Parameters.EnumParameterEmitter">
            <summary>
            Implementation of ParameterEmitter for enumeration types
            </summary>
        </member>
        <member name="T:StructureMap.Configuration.XmlConstants">
            <summary>
            Constants for the names of Xml nodes and attributes in the StructureMap.config
            file
            </summary>
        </member>
        <member name="T:StructureMap.Source.XmlAttributeInstanceMemento">
            <summary>
            An implementation of InstanceMemento that stores properties as Xml attributes
            Limited functionality
            </summary>
        </member>
        <member name="T:StructureMap.Emitting.Method">
            <summary>
            Emits the IL for one method
            </summary>
        </member>
        <member name="T:StructureMap.Emitting.DynamicAssembly">
            <summary>
            Helper class to use to create a dynamically emitted assembly
            </summary>
        </member>
        <member name="T:StructureMap.Configuration.DSL.Expressions.CreatePluginFamilyExpression`1">
            <summary>
            Represents the parameters for creating instances of a given Type
            </summary>
        </member>
        <member name="M:StructureMap.Configuration.DSL.Expressions.CreatePluginFamilyExpression`1.TheDefaultIs(StructureMap.Configuration.DSL.Expressions.IMementoBuilder)">
            <summary>
            Sets the default instance of a Type to the definition represented by builder
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Configuration.DSL.Expressions.CreatePluginFamilyExpression`1.TheDefaultIsConcreteType``1">
            <summary>
            Convenience method that sets the default concrete type of the PluginType.  Type T
            can only accept types that do not have any primitive constructor arguments.
            StructureMap has to know how to construct all of the constructor argument types.
            </summary>
            <typeparam name="CONCRETETYPE"></typeparam>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Configuration.DSL.Expressions.CreatePluginFamilyExpression`1.CacheBy(StructureMap.Attributes.InstanceScope)">
            <summary>
            Sets the object creation of the instances of the PluginType.  For example:  PerRequest,
            Singleton, ThreadLocal, HttpContext, or Hybrid
            </summary>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Configuration.DSL.Expressions.CreatePluginFamilyExpression`1.AsSingletons">
            <summary>
            Convenience method to mark a PluginFamily as a Singleton
            </summary>
            <returns></returns>
        </member>
        <member name="T:StructureMap.Configuration.DSL.Expressions.InstanceExpression">
            <summary>
            Used to define an Instance in code
            </summary>
        </member>
        <member name="M:StructureMap.Configuration.DSL.Expressions.InstanceExpression.WithProperty(System.String)">
            <summary>
            Start the definition of a primitive argument to a constructor argument
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Configuration.DSL.Expressions.InstanceExpression.Child``1(System.String)">
            <summary>
            Starts the definition of a child instance specifying the argument name
            in the case of a constructor function that consumes more than one argument
            of type T
            </summary>
            <typeparam name="CONSTRUCTORARGUMENTTYPE"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Configuration.DSL.Expressions.InstanceExpression.Child``1">
            <summary>
            Start the definition of a child instance for type CONSTRUCTORARGUMENTTYPE
            </summary>
            <typeparam name="CONSTRUCTORARGUMENTTYPE"></typeparam>
            <returns></returns>
        </member>
        <member name="T:StructureMap.Configuration.DSL.Expressions.InstanceExpression.InstanceTypeExpression">
            <summary>
            Helper class to capture the actual concrete type of an Instance
            </summary>
        </member>
        <member name="M:StructureMap.Configuration.DSL.Expressions.InstanceExpression.InstanceTypeExpression.UsingConcreteType``1">
            <summary>
            Use type T for the concrete type of an instance
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Configuration.DSL.Expressions.InstanceExpression.InstanceTypeExpression.UsingConcreteTypeNamed(System.String)">
            <summary>
            Use a named Plugin type denoted by a [Pluggable("Key")] attribute
            </summary>
            <param name="concreteKey"></param>
            <returns></returns>
        </member>
        <member name="T:StructureMap.PluggableAttribute">
            <summary>
            Used to implicitly mark a class as a Plugin candidate for StructureMap
            </summary>
        </member>
        <member name="M:StructureMap.PluggableAttribute.InstanceOf(System.Type)">
            <summary>
            Gets an instance of PluggableAttribute from a Type object 
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.PluggableAttribute.MarkedAsPluggable(System.Type)">
            <summary>
            Determines whether a Type object is marked as Pluggable
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="P:StructureMap.PluggableAttribute.ConcreteKey">
            <summary>
            The ConcreteKey alias of the Type
            </summary>
        </member>
        <member name="P:StructureMap.PluggableAttribute.Description">
            <summary>
            Description of the pluggable class type
            </summary>
        </member>
        <member name="T:StructureMap.MementoSource">
            <summary>
            Abstract class that is the supertype of all storage and retrieval mechanisms of
            InstanceMemento instances
            </summary>
        </member>
        <member name="M:StructureMap.MementoSource.GetMemento(System.String)">
            <summary>
            Retrieves the named InstanceMemento
            </summary>
            <param name="instanceKey">The instanceKey of the requested InstanceMemento</param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.MementoSource.GetAllMementos">
            <summary>
            Retrieves an array of all InstanceMemento's stored by this MementoSource
            </summary>
            <returns></returns>
        </member>
        <member name="M:StructureMap.MementoSource.containsKey(System.String)">
            <summary>
            Template pattern method.  Determines if the MementoSource contains a definition for the
            requested instanceKey.
            </summary>
            <param name="instanceKey"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.MementoSource.retrieveMemento(System.String)">
            <summary>
            Template pattern method.  Retrieves an InstanceMemento for the instanceKey
            </summary>
            <param name="instanceKey"></param>
            <returns></returns>
        </member>
        <member name="P:StructureMap.MementoSource.SourceType">
            <summary>
            The type of MementoSource
            </summary>
        </member>
        <member name="P:StructureMap.MementoSource.Description">
            <summary>
            String description of the MementoSource.  Used in the StructureMap-Client UI.
            </summary>
        </member>
        <member name="M:StructureMap.Source.TemplatedMementoSource.#ctor(StructureMap.MementoSource,StructureMap.MementoSource)">
            <summary>
            Default Constructor
            </summary>
            <param name="innerSource">MementoSource that contains the Memento Templates</param>
            <param name="templateSource">MementoSource that contains instances consisting of Template valuee</param>
        </member>
        <member name="T:StructureMap.InstanceBuilder">
            <summary>
            Base class for creating an object instance from an InstanceMemento.  SubClasses are
            emitted for each concrete Plugin with constructor parameters.
            </summary>
        </member>
        <member name="T:StructureMap.Graph.SetterProperty">
            <summary>
            Represents a PropertyInfo of a Plugin.PluggedType that is filled by Setter Injection
            </summary>
        </member>
        <member name="T:StructureMap.Graph.DefinitionSource">
            <summary>
            Specifies whether a PluginGraphObject is defined Explicitly in the configuration file,
            or implicitly through the [PluginFamily] or [Pluggable] attributes
            </summary>
        </member>
        <member name="T:StructureMap.Emitting.Parameters.ChildParameterEmitter">
            <summary>
            Implementation of ParameterEmitter for a non-primitive, non-array
            constructor argument
            </summary>
        </member>
        <member name="T:StructureMap.Emitting.Parameters.ChildArrayParameterEmitter">
            <summary>
            Implementation of ParameterEmitter for a constructor argument like
            MyClass(IStrategy[] strategies)
            </summary>
        </member>
        <member name="T:StructureMap.Attributes.SetterPropertyAttribute">
            <summary>
            Marks a Property in a Pluggable class as filled by setter injection 
            </summary>
        </member>
        <member name="T:StructureMap.Source.MemoryMementoSource">
            <summary>
            An in-memory MementoSource
            </summary>
        </member>
        <member name="T:StructureMap.Source.XmlAttributeFileMementoSource">
            <summary>
            Stores Attribute-normalized InstanceMemento's in an external file
            </summary>
        </member>
        <member name="T:StructureMap.Source.XmlFileMementoSource">
            <summary>
            Implementation of XmlMementoSource that reads InstanceMemento's from an external file.
            Useful to break the StructureMap.config file into smaller pieces.
            </summary>
        </member>
        <member name="T:StructureMap.Source.XmlMementoSource">
            <summary>
            Base class for all MementoSource classes that store InstanceMemento's as 
            node-normalized Xml
            </summary>
        </member>
        <member name="M:StructureMap.Source.XmlFileMementoSource.#ctor(System.String,System.String,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="FilePath">Path to the xml file that contains the instance configuration</param>
            <param name="XPath">XPath expression to the parent node that contains the InstanceMemento nodes.
            If empty, it defaults to the top node</param>
            <param name="NodeName">The name of the nodes that are InstanceMemento nodes.  Useful to store 
            different types of instances in the same file</param>
        </member>
        <member name="T:StructureMap.InstanceFactory">
            <summary>
            Default implementation of IInstanceFactory
            </summary>
        </member>
        <member name="M:StructureMap.InstanceFactory.#ctor(StructureMap.Graph.PluginFamily,System.Boolean)">
            <summary>
            Constructor to use when troubleshooting possible configuration issues.
            </summary>
            <param name="family"></param>
            <param name="failOnException">Toggles error trapping.  Set to "true" for diagnostics</param>
        </member>
        <member name="M:StructureMap.InstanceFactory.SetInstanceManager(StructureMap.InstanceManager)">
            <summary>
            Links the child InstanceBuilder members to the parent InstanceManager
            </summary>
            <param name="instanceManager"></param>
        </member>
        <member name="M:StructureMap.InstanceFactory.GetInstance(System.String)">
            <summary>
            Creates an object instance for the named InstanceKey
            </summary>
            <param name="instanceKey"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.InstanceFactory.GetInstance(StructureMap.InstanceMemento)">
            <summary>
            Creates an object instance for the supplied InstanceMemento
            </summary>
            <param name="memento"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.InstanceFactory.GetInstance">
            <summary>
            Builds a new instance of the default instance of the PluginType
            </summary>
            <returns></returns>
        </member>
        <member name="M:StructureMap.InstanceFactory.GetArray(StructureMap.InstanceMemento[])">
            <summary>
            Builds an array of object instances for every InstanceMemento passed in
            </summary>
            <param name="Mementos"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.InstanceFactory.SetDefault(System.String)">
            <summary>
            Sets the default InstanceMemento
            </summary>
            <param name="instanceKey"></param>
        </member>
        <member name="M:StructureMap.InstanceFactory.SetDefault(StructureMap.InstanceMemento)">
            <summary>
            Sets the default InstanceMemento
            </summary>
            <param name="memento"></param>
        </member>
        <member name="P:StructureMap.InstanceFactory.Source">
            <summary>
            Retrieves the MementoSource member of the InstanceFactory
            </summary>
        </member>
        <member name="P:StructureMap.InstanceFactory.PluginType">
            <summary>
            The CLR System.Type that the InstanceFactory creates
            </summary>
        </member>
        <member name="P:StructureMap.InstanceFactory.DefaultInstanceKey">
            <summary>
            The default instanceKey
            </summary>
        </member>
        <member name="M:StructureMap.Configuration.DSL.Registry.configure">
            <summary>
            Implement this method to 
            </summary>
        </member>
        <member name="M:StructureMap.Configuration.DSL.Registry.BuildInstancesOf``1">
            <summary>
            Direct StructureMap to build instances of type T, and look for concrete classes
            marked with the [Pluggable] attribute that implement type T
            </summary>
            <typeparam name="PLUGINTYPE"></typeparam>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:StructureMap.Configuration.DSL.Registry.ForRequestedType``1" -->
        <member name="M:StructureMap.Configuration.DSL.Registry.AddInstanceOf``1">
            <summary>
            Starts an instance definition of type T
            </summary>
            <typeparam name="PLUGINTYPE"></typeparam>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Configuration.DSL.Registry.Instance``1">
            <summary>
            Convenience method to start the definition of an instance of type T
            </summary>
            <typeparam name="PLUGINTYPE"></typeparam>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Configuration.DSL.Registry.Prototype``1(``0)">
            <summary>
            Convenience method to register a prototype instance
            </summary>
            <typeparam name="PLUGINTYPE"></typeparam>
            <param name="prototype"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Configuration.DSL.Registry.Object``1(``0)">
            <summary>
            Convenience method to register a preconfigured instance of type T
            </summary>
            <typeparam name="PLUGINTYPE"></typeparam>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Configuration.DSL.Registry.AddInstanceOf``1(``0)">
            <summary>
            Registers a preconfigured instance
            </summary>
            <typeparam name="PLUGINTYPE"></typeparam>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Configuration.DSL.Registry.AddPrototypeInstanceOf``1(``0)">
            <summary>
            Add a preconfigured instance as a Prototype
            </summary>
            <typeparam name="PLUGINTYPE"></typeparam>
            <param name="prototype"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Configuration.DSL.Registry.LoadUserControlFrom``1(System.String)">
            <summary>
            convenience method for a UserControl
            </summary>
            <typeparam name="PLUGINTYPE"></typeparam>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Configuration.DSL.Registry.CreateProfile(System.String)">
            <summary>
            Starts the definition of a new Profile
            </summary>
            <param name="profileName"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Configuration.DSL.Registry.LoadControlFromUrl``1(System.String)">
            <summary>
            Registers a UserControl as an instance 
            </summary>
            <typeparam name="PLUGINTYPE"></typeparam>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Configuration.DSL.Registry.ScanAssemblies">
            <summary>
            Programmatically determine Assembly's to be scanned for attribute configuration
            </summary>
            <returns></returns>
        </member>
        <member name="T:StructureMap.Configuration.DSL.Expressions.PropertyExpression">
            <summary>
            Defines the value of a primitive argument to a constructur argument
            </summary>
        </member>
        <member name="M:StructureMap.Configuration.DSL.Expressions.PropertyExpression.EqualTo(System.Object)">
            <summary>
            Sets the value of the constructor argument
            </summary>
            <param name="propertyValue"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Configuration.DSL.Expressions.PropertyExpression.EqualToAppSetting(System.String)">
            <summary>
            Sets the value of the constructor argument to the key/value in the 
            AppSettings
            </summary>
            <param name="appSettingKey"></param>
            <returns></returns>
        </member>
        <member name="T:StructureMap.Configuration.DSL.Expressions.LiteralExpression`1">
            <summary>
            Small helper class to represent an object to be plugged into a PluginType as is
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:StructureMap.Source.BasicXmlMementoSource">
            <summary>
            Generic implementation of an XmlMementoSource
            </summary>
        </member>
        <member name="T:StructureMap.PluginGraphBuilder">
            <summary>
            Reads configuration XML documents and builds the structures necessary to initialize
            the InstanceManager/IInstanceFactory/InstanceBuilder/ObjectInstanceActivator objects
            </summary>
        </member>
        <member name="M:StructureMap.IPluginGraphSource.Build">
            <summary>
            Reads the configuration information and returns the PluginGraph definition of
            plugin families and plugin's
            </summary>
            <returns></returns>
        </member>
        <member name="M:StructureMap.IPluginGraphSource.BuildDiagnosticPluginGraph">
            <summary>
            Build a PluginGraph with all instances calculated.  Used in the UI and diagnostic tools.
            </summary>
            <returns></returns>
        </member>
        <member name="M:StructureMap.PluginGraphBuilder.#ctor(System.String)">
            <summary>
            Creates a PluginGraphBuilder that reads configuration from the filePath
            </summary>
            <param name="filePath">The path to the configuration file</param>
        </member>
        <member name="M:StructureMap.PluginGraphBuilder.#ctor">
            <summary>
            Default constructor reads configuration from the StructureMap.config file
            in the application folder
            </summary>
        </member>
        <member name="M:StructureMap.PluginGraphBuilder.Build">
            <summary>
            Reads the configuration information and returns the PluginGraph definition of
            plugin families and plugin's
            </summary>
            <returns></returns>
        </member>
        <member name="M:StructureMap.PluginGraphBuilder.BuildDiagnosticPluginGraph">
            <summary>
            Build a PluginGraph with all instances calculated.  Used in the UI and diagnostic tools.
            </summary>
            <returns></returns>
        </member>
        <member name="M:StructureMap.IInstanceManager.InjectStub(System.Type,System.Object)">
            <summary>
            Sets up the InstanceManager to return the object in the "stub" argument anytime
            any instance of the PluginType is requested
            </summary>
            <param name="pluginType"></param>
            <param name="stub"></param>
        </member>
        <member name="M:StructureMap.IInstanceManager.SetDefault(System.Type,StructureMap.InstanceMemento)">
            <summary>
            Sets the default instance for the PluginType
            </summary>
            <param name="pluginType"></param>
            <param name="instanceMemento"></param>
        </member>
        <member name="M:StructureMap.IInstanceManager.SetDefault(System.Type,System.String)">
            <summary>
            Sets the default instance for the PluginType
            </summary>
            <param name="pluginType"></param>
            <param name="instanceKey"></param>
        </member>
        <member name="M:StructureMap.IInstanceManager.SetDefault(System.String,System.String)">
            <summary>
            Sets the default instance for the PluginType
            </summary>
            <param name="pluginTypeName"></param>
            <param name="instanceKey"></param>
        </member>
        <member name="M:StructureMap.IInstanceManager.CreateInstance(System.Type)">
            <summary>
            Creates a new object instance of the requested type
            </summary>
            <param name="pluginType"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.IInstanceManager.CreateInstance(System.Type,StructureMap.InstanceMemento)">
            <summary>
            Creates a new instance of the requested type using the InstanceMemento.  Mostly used from other
            classes to link children members
            </summary>
            <param name="pluginType"></param>
            <param name="instanceMemento"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.IInstanceManager.CreateInstance(System.Type,System.String)">
            <summary>
            Creates the named instance of the PluginType
            </summary>
            <param name="pluginType"></param>
            <param name="instanceKey"></param>
            <returns></returns>
        </member>
        <member name="T:StructureMap.Graph.PluginFamilyCollection">
            <summary>
            Custom collection class for PluginFamily's
            </summary>
        </member>
        <member name="T:StructureMap.Graph.InstanceDefaultManager">
            <summary>
            Contains the logic rules to determine the default instances for a PluginGraph and/or
            InstanceManager for any combination of profile and machine name.
            </summary>
        </member>
        <member name="M:StructureMap.Graph.InstanceDefaultManager.AddPluginFamilyDefault(StructureMap.Graph.InstanceDefault)">
            <summary>
            Adds the InstanceDefault from a PluginFamily
            </summary>
            <param name="instanceDefault"></param>
        </member>
        <member name="M:StructureMap.Graph.InstanceDefaultManager.AddPluginFamilyDefault(System.String,System.String)">
            <summary>
            Adds the InstanceDefault from a PluginFamily
            </summary>
            <param name="pluginTypeName"></param>
            <param name="defaultKey"></param>
        </member>
        <member name="M:StructureMap.Graph.InstanceDefaultManager.AddMachineOverride(StructureMap.Graph.MachineOverride)">
            <summary>
            Register a MachineOverride
            </summary>
            <param name="machine"></param>
        </member>
        <member name="M:StructureMap.Graph.InstanceDefaultManager.AddProfile(StructureMap.Graph.Profile)">
            <summary>
            Register a Profile
            </summary>
            <param name="profile"></param>
        </member>
        <member name="M:StructureMap.Graph.InstanceDefaultManager.GetProfile(System.String)">
            <summary>
            Fetches the named Profile
            </summary>
            <param name="profileName"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Graph.InstanceDefaultManager.GetMachineOverride(System.String)">
            <summary>
            Fetches the named MachineOverride
            </summary>
            <param name="machineName"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Graph.InstanceDefaultManager.CalculateDefaults(System.String,System.String)">
            <summary>
            Determines the default instance key for each plugin type using machine and/or
            profile overrides.  Used internally by <see cref="T:StructureMap.ObjectFactory"/> to set instance
            defaults at runtime
            </summary>
            <param name="machineName">The machine (computer) name.</param>
            <param name="profileName"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Graph.InstanceDefaultManager.CalculateDefaults">
            <summary>
            Returns the defaults for the current machine name and the default profile
            </summary>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Graph.InstanceDefaultManager.CalculateOverridenDefaults(System.String,System.String)">
            <summary>
            Determines ONLY overriden defaults.  Used by the Deployment NAnt task to 
            filter a PluginGraph prior to deploying a subset of the StructureMap.config
            file
            </summary>
            <param name="machineName"></param>
            <param name="profileName"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Graph.InstanceDefaultManager.FilterOutNonExistentPluginTypes(StructureMap.Configuration.PluginGraphReport)">
            <summary>
            Removes any InstanceDefault children of both Profile and MachineOverride
            objects that belong to a PluginType that has been removed from the PluginGraph
            </summary>
            <param name="report"></param>
        </member>
        <member name="P:StructureMap.Graph.InstanceDefaultManager.DefaultProfileName">
            <summary>
            If defined, sets the default Profile to be used if no other profile 
            is requested
            </summary>
        </member>
        <member name="T:StructureMap.Emitting.InstanceBuilderAssembly">
            <summary>
            Manages the IL emitting of a dynamic assembly of InstanceBuilder classes
            </summary>
        </member>
        <member name="T:StructureMap.Configuration.DSL.Expressions.ProfileExpression">
            <summary>
            Expression class to help define a runtime Profile
            </summary>
        </member>
        <member name="M:StructureMap.Configuration.DSL.Expressions.ProfileExpression.For``1">
            <summary>
            Starts the definition of the default instance for the containing Profile
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:StructureMap.Graph.RemoteGraph">
            <summary>
            Manages the setup and teardown of a new AppDomain to test a StructureMap configuration.
            </summary>
        </member>
        <member name="T:StructureMap.Graph.Deployable">
            <summary>
            Base class for PluginGraphObject classes that can be marked for deployment
            targets.
            </summary>
        </member>
        <member name="M:StructureMap.Graph.Deployable.IsDeployed(System.String)">
            <summary>
            Returns a boolean flag denoting whether or not the PluginGraphObject is deployed
            for the deploymentTarget
            </summary>
            <param name="deploymentTarget"></param>
            <returns></returns>
        </member>
        <member name="P:StructureMap.Graph.Deployable.DeploymentTargets">
            <summary>
            A string array of the valid deployment options for the PluginGraphObject.
            </summary>
        </member>
        <member name="P:StructureMap.Graph.Deployable.DeploymentDescription">
            <summary>
            Simple string description of the deployment options for the PluginGraphObject
            </summary>
        </member>
        <member name="T:StructureMap.Emitting.Parameters.PrimitiveParameterEmitter">
            <summary>
            Implementation of ParameterEmitter for primitive types other than strings.
            </summary>
        </member>
        <member name="T:StructureMap.Graph.PluginGraph">
            <summary>
            A PluginGraph models the entire listing of all PluginFamily’s and Plugin’s controlled by 
            StructureMap within the current AppDomain. The scope of the PluginGraph is controlled by 
            a combination of custom attributes and the StructureMap.config class
            </summary>
        </member>
        <member name="M:StructureMap.Graph.PluginGraph.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:StructureMap.Graph.PluginGraph.Seal">
            <summary>
            Closes the PluginGraph for adding or removing members.  Searches all of the
            AssemblyGraph's for implicit Plugin and PluginFamily's
            </summary>
        </member>
        <member name="M:StructureMap.Graph.PluginGraph.UnSeal">
            <summary>
            Un-seals a PluginGraph.  Makes  the PluginGraph editable
            </summary>
        </member>
        <member name="T:StructureMap.Configuration.DSL.Expressions.ScanAssembliesExpression">
            <summary>
            Expression that directs StructureMap to scan the named assemblies
            for [PluginFamily] and [Plugin] attributes
            </summary>
        </member>
        <member name="T:StructureMap.Configuration.DSL.Expressions.InstanceDefaultExpression">
            <summary>
            Use to express the instance of a PluginType for the containing Profile
            </summary>
        </member>
        <member name="M:StructureMap.Configuration.DSL.Expressions.InstanceDefaultExpression.UseNamedInstance(System.String)">
            <summary>
            Use a named, preconfigured instance as the default instance for this profile 
            </summary>
            <param name="instanceKey"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Configuration.DSL.Expressions.InstanceDefaultExpression.Use(StructureMap.Configuration.DSL.Expressions.IMementoBuilder)">
            <summary>
            Define the default instance of the PluginType for the containing Profile
            </summary>
            <param name="mementoBuilder"></param>
            <returns></returns>
        </member>
        <member name="T:StructureMap.Verification.PluginGraphConsoleWriter">
            <summary>
            Creates a textual report summarizing the StructureMap configuration of an application,
            including any implicitly defined PluginFamily's and Plugin's marked by attributes
            </summary>
        </member>
        <member name="T:StructureMap.Graph.InstanceDefault">
            <summary>
            Stores the default instance key for a PluginType.  Member of the <see cref="T:StructureMap.Graph.Profile"/>
            and <see cref="T:StructureMap.Graph.MachineOverride"/> classes
            </summary>
        </member>
        <member name="P:StructureMap.Graph.InstanceDefault.DefaultKey">
            <summary>
            Default instance key
            </summary>
        </member>
        <member name="T:StructureMap.Emitting.ClassBuilder">
            <summary>
            Emits the IL for a new class Type
            </summary>
        </member>
        <member name="T:StructureMap.Configuration.Mementos.MemoryInstanceMemento">
            <summary>
            An in-memory implementation of InstanceMemento.  
            </summary>
        </member>
        <member name="M:StructureMap.Configuration.Mementos.MemoryInstanceMemento.CreateReferencedInstanceMemento(System.String)">
            <summary>
            Creates an instance of MemoryInstanceMemento that represents a reference to another
            instance.
            </summary>
            <param name="referenceKey">The referenced instance key to another instance</param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Configuration.Mementos.MemoryInstanceMemento.CreateDefaultInstanceMemento">
            <summary>
            Creates a MemoryInstanceMemento that represents a reference to the default instance
            of a plugin type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Configuration.Mementos.MemoryInstanceMemento.#ctor(System.String,System.String)">
            <summary>
            Constructs a MemoryInstanceMemento without properties
            </summary>
            <param name="concreteKey">The concrete key of the plugin type</param>
            <param name="instanceKey">The identifying instance key</param>
        </member>
        <member name="M:StructureMap.Configuration.Mementos.MemoryInstanceMemento.#ctor(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Constructs a MemoryInstanceMemento with properties
            </summary>
            <param name="concreteKey">The concrete key of the plugin type</param>
            <param name="instanceKey">The identifying instance key</param>
            <param name="properties">NameValueCollection of instance properties</param>
        </member>
        <member name="M:StructureMap.Configuration.Mementos.MemoryInstanceMemento.SetProperty(System.String,System.String)">
            <summary>
            Sets the value of the named property
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:StructureMap.Configuration.Mementos.MemoryInstanceMemento.RemoveProperty(System.String)">
            <summary>
            Deletes a named property from the DefaultInstanceMemento
            </summary>
            <param name="Name"></param>
        </member>
        <member name="M:StructureMap.Configuration.Mementos.MemoryInstanceMemento.AddChild(System.String,StructureMap.InstanceMemento)">
            <summary>
            Links a child InstanceMemento as a named property
            </summary>
            <param name="name"></param>
            <param name="Memento"></param>
        </member>
        <member name="M:StructureMap.Configuration.Mementos.MemoryInstanceMemento.AddChildArray(System.String,StructureMap.InstanceMemento[])">
            <summary>
            Links an array of InstanceMemento's to a named array property
            </summary>
            <param name="name"></param>
            <param name="childMementos"></param>
        </member>
        <member name="M:StructureMap.Configuration.Mementos.MemoryInstanceMemento.GetChildrenArray(System.String)">
            <summary>
            See <cref>InstanceMemento</cref>
            </summary>
        </member>
        <member name="P:StructureMap.Configuration.Mementos.MemoryInstanceMemento.innerConcreteKey">
            <summary>
            See <cref>InstanceMemento</cref>
            </summary>
        </member>
        <member name="P:StructureMap.Configuration.Mementos.MemoryInstanceMemento.innerInstanceKey">
            <summary>
            See <cref>InstanceMemento</cref>
            </summary>
        </member>
        <member name="P:StructureMap.Configuration.Mementos.MemoryInstanceMemento.IsReference">
            <summary>
            See <cref>InstanceMemento</cref>
            </summary>
        </member>
        <member name="P:StructureMap.Configuration.Mementos.MemoryInstanceMemento.ReferenceKey">
            <summary>
            See <cref>InstanceMemento</cref>
            </summary>
        </member>
        <member name="M:StructureMap.Configuration.Tokens.Deployable.IsDeployed(System.String)">
            <summary>
            Returns a boolean flag denoting whether or not the PluginGraphObject is deployed
            for the deploymentTarget
            </summary>
            <param name="deploymentTarget"></param>
            <returns></returns>
        </member>
        <member name="P:StructureMap.Configuration.Tokens.Deployable.DeploymentTargets">
            <summary>
            A string array of the valid deployment options for the GraphObject.
            </summary>
        </member>
        <member name="P:StructureMap.Configuration.Tokens.Deployable.DeploymentDescription">
            <summary>
            Simple string description of the deployment options for the PluginGraphObject
            </summary>
        </member>
        <member name="T:StructureMap.Source.XmlNodeInstanceMemento">
            <summary>
            Implementation of InstanceMemento that stores information in a node-normalized
            Xml format.
            </summary>
        </member>
        <member name="M:StructureMap.Source.EmbeddedFolderXmlMementoSource.#ctor(StructureMap.Source.XmlMementoStyle,System.String,System.String,System.String)">
            <summary>
            Implementation of MementoSource that stores and retrieves an XmlInstanceMemento per Embedded Resource file 
            in a named namespace.  EmbeddedFolderXmlMementoSource is meant to simplify complicated object graph configurations 
            by isolating each instance to a separate
            editable file.
            </summary>
            <param name="style">NodeNormalized or AttributeNormalized</param>
            <param name="assemblyName">The name of the Assembly with the embedded resources</param>
            <param name="folderPath">The root namespace of all of the mementos.</param>
            <param name="extension">The file extension of the memento files - "xml"</param>
        </member>
        <member name="T:StructureMap.Interceptors.SingletonInterceptor">
            <summary>
            The SingletonInterceptor is a GoF Decorator around an IInstanceFactory that ensures that 
            only one instance is created for a given InstanceKey as a more testable alternative to 
            the GoF Singleton pattern. 
            </summary>
        </member>
        <member name="T:StructureMap.InstanceManager">
            <summary>
            A collection of IInstanceFactory's.
            </summary>
        </member>
        <member name="M:StructureMap.InstanceManager.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:StructureMap.InstanceManager.#ctor(StructureMap.Graph.PluginGraph)">
            <summary>
            Creates an InstanceManager from the contents of the pluginGraph.  Fails
            on any exceptions found
            </summary>
            <param name="pluginGraph"></param>
        </member>
        <member name="M:StructureMap.InstanceManager.#ctor(StructureMap.Graph.PluginGraph,System.Boolean)">
            <summary>
            Constructor to create an InstanceManager that traps exceptions.  Used to diagnose
            configuration and runtime errors
            </summary>
            <param name="pluginGraph">PluginGraph containing the instance and type definitions 
            for the InstanceManager</param>
            <param name="failOnException">Flags the InstanceManager to fail or trap exceptions</param>
        </member>
        <member name="M:StructureMap.InstanceManager.SetDefaults(StructureMap.Graph.Profile)">
            <summary>
            Sets the default instances for all PluginType's managed by the InstanceManager
            </summary>
            <param name="defaultProfile"></param>
        </member>
        <member name="M:StructureMap.InstanceManager.RegisterType(StructureMap.IInstanceFactory)">
            <summary>
            Adds an instance of an IInstanceFactory
            </summary>
            <param name="instanceFactory"></param>
        </member>
        <member name="M:StructureMap.InstanceManager.CreateInstance(System.Type,System.String)">
            <summary>
            Creates the named instance of the PluginType
            </summary>
            <param name="pluginType"></param>
            <param name="instanceKey"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.InstanceManager.CreateInstance(System.Type)">
            <summary>
            Creates a new object instance of the requested type
            </summary>
            <param name="pluginType"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.InstanceManager.CreateInstance(System.String)">
            <summary>
            Creates a new object instance of the requested type
            </summary>
            <param name="pluginTypeName">Fully qualified name of the CLR Type to create</param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.InstanceManager.CreateInstance(System.String,StructureMap.InstanceMemento)">
            <summary>
            Creates a new instance of the requested type using the InstanceMemento.  Mostly used from other
            classes to link children members
            </summary>
            <param name="pluginTypeName"></param>
            <param name="instanceMemento"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.InstanceManager.CreateInstance(System.Type,StructureMap.InstanceMemento)">
            <summary>
            Creates a new instance of the requested type using the InstanceMemento.  Mostly used from other
            classes to link children members
            </summary>
            <param name="pluginType"></param>
            <param name="instanceMemento"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.InstanceManager.CreateInstanceArray(System.String,StructureMap.InstanceMemento[])">
            <summary>
            Creates an array of object instances of the requested type
            </summary>
            <param name="pluginType"></param>
            <param name="instanceMementoes"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.InstanceManager.SetDefault(System.Type,StructureMap.InstanceMemento)">
            <summary>
            Sets the default instance for the PluginType
            </summary>
            <param name="pluginType"></param>
            <param name="instanceMemento"></param>
        </member>
        <member name="M:StructureMap.InstanceManager.SetDefault(System.Type,System.String)">
            <summary>
            Sets the default instance for the PluginType
            </summary>
            <param name="pluginType"></param>
            <param name="instanceKey"></param>
        </member>
        <member name="M:StructureMap.InstanceManager.SetDefault(System.String,System.String)">
            <summary>
            Sets the default instance for the PluginType
            </summary>
            <param name="pluginTypeName"></param>
            <param name="instanceKey"></param>
        </member>
        <member name="M:StructureMap.InstanceManager.FillDependencies(System.Type)">
            <summary>
            Attempts to create a new instance of the requested type.  Automatically inserts the default
            configured instance for each dependency in the StructureMap constructor function.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.InstanceManager.InjectStub(System.Type,System.Object)">
            <summary>
            Sets up the InstanceManager to return the object in the "stub" argument anytime
            any instance of the PluginType is requested
            </summary>
            <param name="pluginType"></param>
            <param name="stub"></param>
        </member>
        <member name="T:StructureMap.Graph.PluginFamily">
            <summary>
            Conceptually speaking, a PluginFamily object represents a point of abstraction or variability in 
            the system.  A PluginFamily defines a CLR Type that StructureMap can build, and all of the possible
            Plugin’s implementing the CLR Type.
            </summary>
        </member>
        <member name="M:StructureMap.Graph.PluginFamily.#ctor(System.Type)">
            <summary>
            Testing constructor
            </summary>
            <param name="pluginType"></param>
        </member>
        <member name="M:StructureMap.Graph.PluginFamily.#ctor(StructureMap.Graph.TypePath,System.String)">
            <summary>
            Troubleshooting constructor to find potential problems with a PluginFamily's
            configuration
            </summary>
            <param name="path"></param>
            <param name="defaultKey"></param>
        </member>
        <member name="M:StructureMap.Graph.PluginFamily.FindPlugins(StructureMap.Graph.AssemblyGraph)">
            <summary>
            Finds Plugin's that match the PluginType from the assembly and add to the internal
            collection of Plugin's 
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:StructureMap.Graph.PluginFamily.RemoveImplicitChildren">
            <summary>
            Removes any Implicitly defined Plugin and/or Instance from the PluginFamily
            </summary>
        </member>
        <member name="P:StructureMap.Graph.PluginFamily.PluginType">
            <summary>
            The CLR Type that defines the "Plugin" interface for the PluginFamily
            </summary>
        </member>
        <member name="P:StructureMap.Graph.PluginFamily.DefaultInstanceKey">
            <summary>
            The InstanceKey of the default instance of the PluginFamily
            </summary>
        </member>
        <member name="P:StructureMap.Graph.PluginFamily.DefinitionSource">
            <summary>
            Denotes the source or the definition for this Plugin.  Implicit means the
            Plugin is defined by a [Pluggable] attribute on the PluggedType.  Explicit
            means the Plugin was defined in the StructureMap.config file.
            </summary>
        </member>
        <member name="P:StructureMap.Graph.PluginFamily.Source">
            <summary>
            The MementoSource that fetches InstanceMemento definitions for the PluginFamily
            </summary>
        </member>
        <member name="M:StructureMap.Source.SingleEmbeddedXmlMementoSource.#ctor(System.String,StructureMap.Source.XmlMementoStyle,System.String,System.String)">
            <summary>
            Retrieves Xml InstanceMemento's from an xml file stored as an embedded resource in an assembly.
            </summary>
            <param name="nodeName">Designates the nodes that are memento nodes</param>
            <param name="style">NodeNormalized or AttributeNormalized</param>
            <param name="assemblyName">The name of the Assembly the file is embedded into</param>
            <param name="path">The path to the embedded resource within the file</param>
        </member>
        <member name="T:StructureMap.Configuration.DSL.Expressions.PrototypeExpression`1">
            <summary>
            Sets up a Prototype instance of type T
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:StructureMap.Configuration.DSL.Expressions.ChildInstanceExpression">
            <summary>
            Part of the Fluent Interface, represents a nonprimitive argument to a 
            constructure function
            </summary>
        </member>
        <member name="M:StructureMap.Configuration.DSL.Expressions.ChildInstanceExpression.IsNamedInstance(System.String)">
            <summary>
            Use a previously configured and named instance for the child
            </summary>
            <param name="instanceKey"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Configuration.DSL.Expressions.ChildInstanceExpression.IsConcreteType``1">
            <summary>
            Start the definition of a child instance by defining the concrete type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Configuration.DSL.Expressions.ChildInstanceExpression.Is(StructureMap.Configuration.DSL.Expressions.InstanceExpression)">
            <summary>
            Registers a configured instance to use as the argument to the parent's
            constructor
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="T:StructureMap.Caching.EagerInstanceCache">
            <summary>
            Summary description for EagerInstanceCache.
            </summary>
        </member>
        <member name="T:StructureMap.ValidationMethodAttribute">
            <summary>
            Marks a method with no parameters as a method that validates an instance.  StructureMap
            uses this method to validate the configuration file.  If the method does not throw an
            exception, the object is assumed to be valid.
            </summary>
        </member>
        <member name="M:StructureMap.ValidationMethodAttribute.GetValidationMethods(System.Type)">
            <summary>
            Returns an array of any MethodInfo's on a Type that are marked as ValidationMethod
            </summary>
            <param name="objectType">CLR Type to search for validation methods</param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.ValidationMethodAttribute.CallValidationMethods(System.Object)">
            <summary>
            Executes the marked validation methods, if any, on an object
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:StructureMap.StructureMapConfiguration.GetStructureMapConfigurationPath">
            <summary>
            Returns the path to the StructureMap.config file
            </summary>
            <returns></returns>
        </member>
        <member name="M:StructureMap.StructureMapConfiguration.ResetAll">
            <summary>
            Clears StructureMapConfiguration of all configuration options.  Returns StructureMap
            to only using the default StructureMap.config file for configuration.
            </summary>
        </member>
        <member name="M:StructureMap.StructureMapConfiguration.GetPluginGraph">
            <summary>
            Builds a PluginGraph object for the current configuration.  Used by ObjectFactory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:StructureMap.StructureMapConfiguration.GetDiagnosticReport">
            <summary>
            Creates a PluginGraphReport that details the current configuration along with any problems found with the configuration.  
            The PluginGraphReport can be used to troubleshoot problems with the StructureMap configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:StructureMap.StructureMapConfiguration.IncludeConfigurationFromFile(System.String)">
            <summary>
            Directs StructureMap to include Xml configuration information from a separate file
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:StructureMap.StructureMapConfiguration.IncludeConfigurationFrom(StructureMap.Configuration.FetchNodeDelegate)">
            <summary>
            Register a FetchNodeDelegate delegate to retrieve a &lt;StructureMap&gt;
            node to include Xml configuration
            </summary>
            <param name="fetcher"></param>
        </member>
        <member name="M:StructureMap.StructureMapConfiguration.IncludeConfigurationFromNode(System.Xml.XmlNode)">
            <summary>
            Programmatically adds a &lt;StructureMap&gt; node containing Xml configuration
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:StructureMap.StructureMapConfiguration.ScanAssemblies">
            <summary>
            Programmatically determine Assembly's to be scanned for attribute configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:StructureMap.StructureMapConfiguration.BuildInstancesOf``1">
            <summary>
            Direct StructureMap to create instances of Type T
            </summary>
            <typeparam name="PLUGINTYPE">The Type to build</typeparam>
            <returns></returns>
        </member>
        <member name="M:StructureMap.StructureMapConfiguration.ForRequestedType``1">
            <summary>
            Direct StructureMap to create instances of Type T
            </summary>
            <typeparam name="PLUGINTYPE">The Type to build</typeparam>
            <returns></returns>
        </member>
        <member name="M:StructureMap.StructureMapConfiguration.AddInstanceOf``1">
            <summary>
            Adds a new configured instance of Type T
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:StructureMap.StructureMapConfiguration.AddInstanceOf``1(``0)">
            <summary>
            Adds a preconfigured instance of Type T to StructureMap.  When this instance is requested,
            StructureMap will always return the original object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.StructureMapConfiguration.AddPrototypeInstanceOf``1(``0)">
            <summary>
            Adds a Prototype (GoF) instance of Type T.  The actual prototype object must implement the
            ICloneable interface.  When this instance of T is requested, StructureMap will
            return a cloned copy of the originally registered prototype object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="prototype"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.StructureMapConfiguration.CreateProfile(System.String)">
            <summary>
            Starts the definition of a configuration Profile. 
            </summary>
            <param name="profileName"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.StructureMapConfiguration.AddRegistry(StructureMap.Configuration.DSL.Registry)">
            <summary>
            Directs StructureMap to use a Registry class to construct the
            PluginGraph
            </summary>
            <param name="registry"></param>
        </member>
        <member name="M:StructureMap.StructureMapConfiguration.OnStartUp">
            <summary>
            Controls the reporting and diagnostics of StructureMap on 
            startup
            </summary>
            <returns></returns>
        </member>
        <member name="P:StructureMap.StructureMapConfiguration.UseDefaultStructureMapConfigFile">
            <summary>
            Flag to enable or disable the usage of the default StructureMap.config
            If set to false, StructureMap will not look for a StructureMap.config file
            </summary>
        </member>
        <member name="T:StructureMap.Graph.Profile">
            <summary>
            A collection of InstanceDefault's overriding the default instances
            </summary>
        </member>
        <member name="T:StructureMap.StructureMapException">
            <summary>
            Main exception for StructureMap.  Use the ErrorCode to aid in troubleshooting
            StructureMap problems
            </summary>
        </member>
        <member name="T:StructureMap.PluginFamilyAttribute">
            <summary>
            Declares a class, abstract class, or interface to be the target of a PluginFamily in the container
            </summary>
        </member>
        <member name="M:StructureMap.PluginFamilyAttribute.MarkedAsPluginFamily(System.Type)">
            <summary>
            Determines if a Type object is marked as a PluginFamily
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.PluginFamilyAttribute.GetDefaultKey(System.Type)">
            <summary>
            Gets the default instance key from a Type marked as a PluginFamily
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.PluginFamilyAttribute.IsMarkedAsSingleton(System.Type)">
            <summary>
            Interrogates the attribute on the pluginType and determines if the PluginFamily is
            marked as a Singleton
            </summary>
            <param name="pluginType"></param>
            <returns></returns>
        </member>
        <member name="P:StructureMap.PluginFamilyAttribute.Scope">
            <summary>
            If set, determines the shared "scope" of the instance -- PerRequest, Singleton, ThreadLocal,
            HttpContext, etc.
            </summary>
        </member>
        <member name="P:StructureMap.PluginFamilyAttribute.DefaultKey">
            <summary>
            InstanceKey of the default instance.  Used to implicitly define the default without
            declaring the instance in StructureMap.config
            </summary>
        </member>
        <member name="P:StructureMap.PluginFamilyAttribute.IsSingleton">
            <summary>
            Declares the target to be built by StructureMap as a Singleton.  One object instance will
            be created for each named instance
            </summary>
        </member>
        <member name="T:StructureMap.DefaultConstructorAttribute">
            <summary>
            Used to override the constructor of a class to be used by StructureMap to create
            a Pluggable object
            </summary>
        </member>
        <member name="M:StructureMap.DefaultConstructorAttribute.GetConstructor(System.Type)">
            <summary>
            Examines a System.Type object and determines the ConstructorInfo to use in creating
            instances of the Type
            </summary>
            <param name="ExportedType"></param>
            <returns></returns>
        </member>
        <member name="T:StructureMap.Graph.AssemblyGraph">
            <summary>
            Models an assembly reference in a PluginGraph
            </summary>
        </member>
        <member name="M:StructureMap.Graph.AssemblyGraph.GetAllAssembliesAtPath(System.String)">
            <summary>
            Finds a string array of all the assembly files in a path.  Used
            by the UI
            </summary>
            <param name="folderPath"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Graph.AssemblyGraph.#ctor(System.String)">
            <summary>
            Creates an AssemblyGraph, traps exceptions to troubleshoot configuration issues
            </summary>
            <param name="assemblyName"></param>
        </member>
        <member name="M:StructureMap.Graph.AssemblyGraph.FindPluginFamilies">
            <summary>
            Returns an array of all the CLR Type's in the Assembly that are marked as
            [PluginFamily]
            </summary>
            <returns></returns>
        </member>
        <member name="P:StructureMap.Graph.AssemblyGraph.AssemblyName">
            <summary>
            Short name of the Assembly
            </summary>
        </member>
        <member name="P:StructureMap.Graph.AssemblyGraph.InnerAssembly">
            <summary>
            Reference to the System.Reflection.Assembly object
            </summary>
        </member>
        <member name="P:StructureMap.Graph.AssemblyGraph.LookForPluginFamilies">
            <summary>
            Used to control whether or not the assembly should be searched for implicit attributes
            </summary>
        </member>
        <member name="T:StructureMap.Emitting.BuildInstanceMethod">
            <summary>
            Emits the IL for the InstanceBuilder.BuildInstance(InstanceMemento) method of an
            InstanceBuilder
            </summary>
        </member>
        <member name="T:StructureMap.ObjectFactory">
            <summary>
            The main static Facade for the StructureMap container
            </summary>
        </member>
        <member name="M:StructureMap.ObjectFactory.ReInitialize">
            <summary>
            Used for testing only (kills singletons). In non-test scenarios, use Reset() instead.
            </summary>
        </member>
        <member name="M:StructureMap.ObjectFactory.FillDependencies(System.Type)">
            <summary>
            Attempts to create a new instance of the requested type.  Automatically inserts the default
            configured instance for each dependency in the StructureMap constructor function.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.ObjectFactory.InjectStub(System.Type,System.Object)">
            <summary>
            Sets up StructureMap to return the object in the "stub" argument anytime
            any instance of the PluginType is requested
            </summary>
            <param name="pluginType"></param>
            <param name="stub"></param>
        </member>
        <member name="M:StructureMap.ObjectFactory.InjectStub``1(``0)">
            <summary>
            Sets up StructureMap to return the object in the "stub" argument anytime
            any instance of the PluginType is requested
            </summary>
            <param name="targetType"></param>
            <param name="stub"></param>
        </member>
        <member name="M:StructureMap.ObjectFactory.Inject``1(``0)">
            <summary>
            Sets the default instance of PLUGINTYPE to the object in the instance argument
            </summary>
            <typeparam name="PLUGINTYPE"></typeparam>
            <param name="instance"></param>
        </member>
        <member name="M:StructureMap.ObjectFactory.InjectByName``1(``0,System.String)">
            <summary>
            Injects a new instance of PLUGINTYPE by name.  
            </summary>
            <typeparam name="PLUGINTYPE"></typeparam>
            <param name="instance"></param>
            <param name="instanceKey"></param>
        </member>
        <member name="M:StructureMap.ObjectFactory.InjectByName``2(System.String)">
            <summary>
            Injects a new instance of CONCRETETYPE to PLUGINTYPE by name.  
            </summary>
            <typeparam name="PLUGINTYPE"></typeparam>
            <typeparam name="CONCRETETYPE"></typeparam>
            <param name="instanceKey"></param>
        </member>
        <member name="M:StructureMap.ObjectFactory.InjectDefaultType``2">
            <summary>
            StructureMap will return an instance of CONCRETETYPE whenever
            a PLUGINTYPE is requested
            </summary>
            <typeparam name="PLUGINTYPE"></typeparam>
            <typeparam name="CONCRETETYPE"></typeparam>
        </member>
        <member name="M:StructureMap.ObjectFactory.AddType``2">
            <summary>
            Adds a new CONCRETETYPE to StructureMap so that an instance of CONCRETETYPE
            will be returned from a call to ObjectFactory.GetAllInstance&lt;PLUGINTYPE&gt;()
            </summary>
            <typeparam name="PLUGINTYPE"></typeparam>
            <typeparam name="CONCRETETYPE"></typeparam>
        </member>
        <member name="M:StructureMap.ObjectFactory.Reset">
            <summary>
            Restarts ObjectFactory.  Use with caution.
            </summary>
        </member>
        <member name="M:StructureMap.ObjectFactory.ReplaceManager(StructureMap.IInstanceManager)">
            <summary>
            Strictly used for testing scenarios
            </summary>
            <param name="manager"></param>
        </member>
        <member name="M:StructureMap.ObjectFactory.ResetDefaults">
            <summary>
            Restores all default instance settings according to the StructureMap.config files
            </summary>
        </member>
        <member name="M:StructureMap.ObjectFactory.GetInstance(System.Type)">
            <summary>
            Returns the default instance of the requested System.Type
            </summary>
            <param name="TargetType"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.ObjectFactory.GetInstance``1">
            <summary>
            Returns the default instance of the requested System.Type
            </summary>
            <typeparam name="TargetType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:StructureMap.ObjectFactory.GetInstance(System.Type,StructureMap.InstanceMemento)">
            <summary>
            Builds an instance of the TargetType for the given InstanceMemento
            </summary>
            <param name="TargetType"></param>
            <param name="memento"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.ObjectFactory.GetInstance``1(StructureMap.InstanceMemento)">
            <summary>
            Builds an instance of the TargetType for the given InstanceMemento
            </summary>
            <typeparam name="TargetType"></typeparam>
            <param name="memento"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.ObjectFactory.GetNamedInstance(System.Type,System.String)">
            <summary>
            Returns the named instance of the requested System.Type
            </summary>
            <param name="TargetType"></param>
            <param name="InstanceName"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.ObjectFactory.GetNamedInstance``1(System.String)">
            <summary>
            Returns the named instance of the requested System.Type
            </summary>
            <typeparam name="TargetType"></typeparam>
            <param name="InstanceName"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.ObjectFactory.SetDefaultInstanceName(System.Type,System.String)">
            <summary>
            Sets the default instance of the TargetType
            </summary>
            <param name="TargetType"></param>
            <param name="InstanceName"></param>
        </member>
        <member name="M:StructureMap.ObjectFactory.SetDefaultInstanceName``1(System.String)">
            <summary>
            Sets the default instance of the TargetType
            </summary>
            <typeparam name="TargetType"></typeparam>
            <param name="InstanceName"></param>
        </member>
        <member name="M:StructureMap.ObjectFactory.SetDefaultInstanceName(System.String,System.String)">
            <summary>
            Sets the default instance of the TargetType
            </summary>
            <param name="TargetTypeName"></param>
            <param name="InstanceName"></param>
        </member>
        <member name="M:StructureMap.ObjectFactory.GetAllInstances(System.Type)">
            <summary>
            Retrieves a list of all of the configured instances for a particular type
            </summary>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.ObjectFactory.GetAllInstances``1">
            <summary>
            Retrieves a list of all of the configured instances for a particular type
            </summary>
            <typeparam name="TargetType"></typeparam>
            <returns></returns>
        </member>
        <member name="P:StructureMap.ObjectFactory.Profile">
            <summary>
            Gets or sets the current named profile.  When set, overrides the default object instances
            according to the configured profile in StructureMap.config
            </summary>
        </member>
        <member name="E:StructureMap.ObjectFactory.Refresh">
            <summary>
            Fires when the ObjectFactory is refreshed
            </summary>
        </member>
        <member name="T:StructureMap.Graph.TypePath">
            <summary>
            Designates a CLR type that is loaded by name.
            </summary>
        </member>
        <member name="T:StructureMap.Graph.RemoteGraphContainer">
            <summary>
            Manages the setup and teardown of a new AppDomain to test a StructureMap configuration.
            </summary>
        </member>
        <member name="T:StructureMap.Graph.Plugin">
            <summary>
            Represents a concrete class that can be built by StructureMap as an instance of the parent 
            PluginFamily’s PluginType. The properties of a Plugin are the CLR Type of the concrete class, 
            and the human-friendly concrete key that StructureMap will use to identify the Type.
            </summary>
        </member>
        <member name="M:StructureMap.Graph.Plugin.IsAnExplicitPlugin(System.Type,System.Type)">
            <summary>
            Determines if the PluggedType is a valid Plugin into the
            PluginType
            </summary>
            <param name="pluginType"></param>
            <param name="pluggedType"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Graph.Plugin.CanBeCast(System.Type,System.Type)">
            <summary>
            Determines if the pluggedType can be upcast to the pluginType
            </summary>
            <param name="pluginType"></param>
            <param name="pluggedType"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Graph.Plugin.CreateImplicitPlugin(System.Type)">
            <summary>
            Creates an Implicit Plugin that discovers its ConcreteKey from a [Pluggable]
            attribute on the PluggedType 
            </summary>
            <param name="pluggedType"></param>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Graph.Plugin.CreateExplicitPlugin(System.Type,System.String,System.String)">
            <summary>
            Creates an Explicit Plugin for the pluggedType with the entered
            concreteKey
            </summary>
            <param name="pluggedType"></param>
            <param name="concreteKey"></param>
            <param name="description"></param>
        </member>
        <member name="M:StructureMap.Graph.Plugin.#ctor(System.Type,System.String,StructureMap.Graph.DefinitionSource)">
            <summary>
            Creates an Explicit Plugin for the pluggedType with the entered
            concreteKey
            </summary>
            <param name="pluggedType"></param>
            <param name="concreteKey"></param>
        </member>
        <member name="M:StructureMap.Graph.Plugin.#ctor(StructureMap.Graph.TypePath,System.String)">
            <summary>
            Troubleshooting constructor used by PluginGraphBuilder to find possible problems
            with the configured Plugin
            </summary>
            <param name="path"></param>
            <param name="concreteKey"></param>
        </member>
        <member name="M:StructureMap.Graph.Plugin.GetConstructor">
            <summary>
            Returns the System.Reflection.ConstructorInfo for the PluggedType.  Uses either
            the "greediest" constructor with the most arguments or the constructor function
            marked with the [DefaultConstructor]
            </summary>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Graph.Plugin.GetInstanceBuilderClassName">
            <summary>
            Gets a class name for the InstanceBuilder that will be emitted for this Plugin
            </summary>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Graph.Plugin.HasConstructorArguments">
            <summary>
            Boolean flag denoting the presence of any constructor arguments
            </summary>
            <returns></returns>
        </member>
        <member name="M:StructureMap.Graph.Plugin.CreateImplicitMemento">
            <summary>
            Creates an InstanceMemento for a PluggedType that requires no
            configuration.  I.e. a CLR Type that has no constructor functions or 
            is marked as "[AutoFilled]"
            </summary>
            <returns></returns>
        </member>
        <member name="P:StructureMap.Graph.Plugin.ConcreteKey">
            <summary>
            The ConcreteKey that identifies the Plugin within a PluginFamily
            </summary>
        </member>
        <member name="P:StructureMap.Graph.Plugin.PluggedType">
            <summary>
            The concrete CLR Type represented by the Plugin
            </summary>
        </member>
        <member name="P:StructureMap.Graph.Plugin.ValidationMethods">
            <summary>
            Finds any methods on the PluggedType marked with the [ValidationMethod]
            attributes
            </summary>
        </member>
        <member name="P:StructureMap.Graph.Plugin.Setters">
            <summary>
            Property's that will be filled by setter injection
            </summary>
        </member>
        <member name="P:StructureMap.Graph.Plugin.DefinitionSource">
            <summary>
            Denotes the source or the definition for this Plugin.  Implicit means the
            Plugin is defined by a [Pluggable] attribute on the PluggedType.  Explicit
            means the Plugin was defined in the StructureMap.config file.
            </summary>
        </member>
        <member name="P:StructureMap.Graph.Plugin.CanBeAutoFilled">
            <summary>
            Determines if the concrete class can be autofilled.
            </summary>
        </member>
        <member name="T:StructureMap.Graph.AssemblyGraphCollection">
            <summary>
            Custom collection for AssemblyGraph's
            </summary>
        </member>
        <member name="T:StructureMap.Source.DirectoryXmlMementoSource">
            <summary>
            Implementation of MementoSource that stores and retrieves an XmlInstanceMemento per file in a named directory.  
            DirectoryXmlMementoSource is meant to simplify complicated object graph configurations by isolating each instance to a separate
            editable file.
            </summary>
        </member>
        <member name="M:StructureMap.Source.DirectoryXmlMementoSource.#ctor(System.String,System.String,StructureMap.Source.XmlMementoStyle)">
            <summary>
            Stores an Xml InstanceMemento per file in a directory
            </summary>
            <param name="directory">A ";" delimited list of directories to look for mementos.  DirectoryXmlMementoSource 
            will use the FIRST directory it finds</param>
            <param name="extension">The file extension of the InstanceMemento files without a dot.  Typically "xml"</param>
            <param name="mementoStyle">NodeNormalized or AttributeNormalized</param>
        </member>
        <member name="T:StructureMap.Graph.SetterPropertyCollection">
            <summary>
            Custom collection class for SetterProperty objects
            </summary>
        </member>
    </members>
</doc>
